var tipuesearch = {"pages": [{'title': 'About', 'text': '2025 協同專案倉儲與網站', 'tags': '', 'url': 'About.html'}, {'title': 'Git', 'text': '具 GUI (Graphics User Interface, 使用者圖形介面) 的 Git 工具:  SourceTree_portable.7z \n 請將 SourceTree 解開壓縮之後, 將 SourceTree 目錄放入 y:\\, 然候在命令提示字元視窗, 以 Y:\\SourceTree\\app-3.4.12\\sourcetree 啟動 (若直接以滑鼠開啟, 之後的設定檔案將會存入 Windows 操作系統中), 完成的設定將存入 Y:\\home_ipv6\\AppData\\Roaming\\Atlassian, 之後重新開啟後無需重新設定. \n 若之後需要重新設定可攜系統中的 SourceTree, 只需要刪除 Y:\\home_ipv6\\AppData\\Roaming\\Atlassian 目錄後, 重新以 Y:\\SourceTree\\app-3.4.12\\sourcetree 啟動後, 進行新的設定. \n \n Many people learn about Git when they are asked to make changes to an existing repository. While Git is not hard to learn, for many beginners it requires a bit of practice to understand the underlying concepts. \n 許多人在被要求對現有 Git 倉儲進行修改時，才開始學習 Git。雖然 Git 不難學，但對於許多初學者而言，理解其背後的概念需要一些練習。 \n Note for Intro Git for Gitlab  ( 中文翻譯 ) \n', 'tags': '', 'url': 'Git.html'}, {'title': 'STL', 'text': 'STL 零件格式介紹 \n', 'tags': '', 'url': 'STL.html'}, {'title': 'STL_tools', 'text': '能夠用來處理 STL 零件檔案的工具介紹 \n', 'tags': '', 'url': 'STL_tools.html'}, {'title': 'Mindmap', 'text': 'Edit cd2025 \n', 'tags': '', 'url': 'Mindmap.html'}, {'title': 'Solvespace', 'text': 'Solvespace 介紹與編譯', 'tags': '', 'url': 'Solvespace.html'}, {'title': 'Solv_parts', 'text': 'Solvespace 零件繪圖導引 \n', 'tags': '', 'url': 'Solv_parts.html'}, {'title': 'Solv_assembly', 'text': 'Solvespace 組立導引 \n', 'tags': '', 'url': 'Solv_assembly.html'}, {'title': 'NX2312', 'text': 'NX2312 介紹 \n', 'tags': '', 'url': 'NX2312.html'}, {'title': 'NX_parts', 'text': 'NX2312 零件繪圖導引 \n', 'tags': '', 'url': 'NX_parts.html'}, {'title': 'NX_assembly', 'text': 'NX2312 組立導引 \n', 'tags': '', 'url': 'NX_assembly.html'}, {'title': 'CoppeliaSim', 'text': '\n ( source ) \n Pinball 遊戲台上各種裝置的正式英文名稱: \n Playfield (遊戲場) \n 整個遊戲台的主要活動區域. \n Spinner (旋轉器) \n 可以旋轉的特殊目標, 球經過時會旋轉並加分. \n Ball drain (球洞) \n 球掉落遊戲台底部的區域, 通常意味著失去一顆球. \n Score display (得分顯示) \n 顯示當前分數的電子螢幕. \n Multiball (多球模式) \n 同時在遊戲台上有多顆球的遊戲狀態. \n Kickback (反彈) \n 可以將即將掉落的球彈回遊戲台的機制. \n Flippers (控制撥桿) \n 位於遊戲台底部的兩個可以控制的撥桿, 用於擊球和控制球的方向. \n Bumpers (跳珠器) \n 分佈在遊戲台上的圓形突起裝置, 當球碰到時會彈開球並加分. \n Slingshots (彈射器) \n 位於flipper兩側的斜面彈射裝置, 當球觸碰時會快速彈開球. \n Targets (目標) \n 遊戲台上的固定打擊目標, 可分為: Drop targets (下降目標), Pop-up targets (彈出目標), Standing targets (靜態目標) 等. \n Lanes (軌道) \n 遊戲台上的特定路徑, 如：Roll-over lanes, Return lanes 等. \n Ramps (斜坡) \n 遊戲台上的傾斜軌道, 球可以滾過並加分. \n Outlanes (外側軌道) \n 位於flipper兩側的軌道, 通常會導致球掉落. \n Plunger (發射器) \n 用於初始發射球的裝置. \n \n References: \n https://en.wikipedia.org/wiki/Pinball \n https://cdn.aaai.org/ocs/1191/1191-5911-1-PB.pdf \n https://www.researchgate.net/publication/360722315_Toward_a_Study_of_Pinball \n https://www.clevelandsoftwaredesign.com/pinball-parts \n https://www.kineticist.com/post/a-beginners-guide-to-pinball-designers \n https://technologystudent.com/pdf22/pinball-full1B.pdf \n https://www.sciencedirect.com/science/article/pii/S1474667017307358', 'tags': '', 'url': 'CoppeliaSim.html'}, {'title': 'Cop_pinball', 'text': 'CoppeliaSim 彈珠檯場景零件與組立 \n', 'tags': '', 'url': 'Cop_pinball.html'}, {'title': 'Cop_zmq', 'text': 'CoppeliaSim 彈珠檯 zmq 控制程式 \n \n', 'tags': '', 'url': 'Cop_zmq.html'}, {'title': 'Webots', 'text': '\n ( source ) \n Pinball 遊戲台上各種裝置的正式英文名稱: \n Playfield (遊戲場) \n 整個遊戲台的主要活動區域. \n Spinner (旋轉器) \n 可以旋轉的特殊目標, 球經過時會旋轉並加分. \n Ball drain (球洞) \n 球掉落遊戲台底部的區域, 通常意味著失去一顆球. \n Score display (得分顯示) \n 顯示當前分數的電子螢幕. \n Multiball (多球模式) \n 同時在遊戲台上有多顆球的遊戲狀態. \n Kickback (反彈) \n 可以將即將掉落的球彈回遊戲台的機制. \n Flippers (控制撥桿) \n 位於遊戲台底部的兩個可以控制的撥桿, 用於擊球和控制球的方向. \n Bumpers (跳珠器) \n 分佈在遊戲台上的圓形突起裝置, 當球碰到時會彈開球並加分. \n Slingshots (彈射器) \n 位於flipper兩側的斜面彈射裝置, 當球觸碰時會快速彈開球. \n Targets (目標) \n 遊戲台上的固定打擊目標, 可分為: Drop targets (下降目標), Pop-up targets (彈出目標), Standing targets (靜態目標) 等. \n Lanes (軌道) \n 遊戲台上的特定路徑, 如：Roll-over lanes, Return lanes 等. \n Ramps (斜坡) \n 遊戲台上的傾斜軌道, 球可以滾過並加分. \n Outlanes (外側軌道) \n 位於flipper兩側的軌道, 通常會導致球掉落. \n Plunger (發射器) \n 用於初始發射球的裝置. \n \n References: \n https://en.wikipedia.org/wiki/Pinball \n https://cdn.aaai.org/ocs/1191/1191-5911-1-PB.pdf \n https://www.researchgate.net/publication/360722315_Toward_a_Study_of_Pinball \n https://www.clevelandsoftwaredesign.com/pinball-parts \n https://www.kineticist.com/post/a-beginners-guide-to-pinball-designers \n https://technologystudent.com/pdf22/pinball-full1B.pdf \n https://www.sciencedirect.com/science/article/pii/S1474667017307358', 'tags': '', 'url': 'Webots.html'}, {'title': 'We_pinball', 'text': 'Webots 彈珠檯場景零件與組立 \n', 'tags': '', 'url': 'We_pinball.html'}, {'title': 'We_python', 'text': 'Webots 彈珠檯 Python 控制程式 \n', 'tags': '', 'url': 'We_python.html'}, {'title': 'Programs', 'text': '', 'tags': '', 'url': 'Programs.html'}, {'title': 'Python', 'text': '', 'tags': '', 'url': 'Python.html'}, {'title': 'Py_slvs', 'text': '可以與 Python 結合使用的 Solvespace 程式庫 \n', 'tags': '', 'url': 'Py_slvs.html'}, {'title': 'Py_NX', 'text': '可以與 NX2312 結合使用的 Python 程式應用 \n', 'tags': '', 'url': 'Py_NX.html'}, {'title': 'Py_copsim', 'text': '可以與 CoppeliaSim 結合使用的 Python 程式應用 \n', 'tags': '', 'url': 'Py_copsim.html'}, {'title': 'Brython2', 'text': '可以在網際前端編寫 Python 並設法與後端伺服器結合使用的 Brython 程式應用 \n 從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束 ', 'tags': '', 'url': 'Brython2.html'}, {'title': 'Demo', 'text': '在網頁中建立 Brython 程式環境: \n <!-- 導入 brython 程式庫 -->\n<p>\n<script src="./../cmsimde/static/brython.js"></script>\n<script src="./../cmsimde/static/brython_stdlib.js"></script>\n</p>\n<!-- 啟動 Brython -->\n<p>\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script>\n<script type="text/python">\n# write your Brython codes here\n</script> \n Brython   modules   or   packages   can put into downloads/py directory \n A Python module is like a file containing special Python instructions that can be used by other Python files or programs. On the other hand, a script is a Python file that is meant to be directly run or executed. \n Python Modules 範例: \n 例如: 將 point.py 放入 downloads/py 目錄中: \n #point.py\ndef point():\n    return "可以傳回 point" \n 一旦導入上列引用 Brython 的頁面, 其中已經宣告 pythonpath 位於 static 與 downloads/py 目錄中, 因此 Brython 在頁面啟動時將導入當時位於這兩個目錄中的 .py 模組, 之後就可以透過 import 導入 point.py 作為模組: \n import point\nprint(point.point())\n \n# 執行後的結果將會印出 downloads/py/point.py 中的 point() 函式執行內容, 也就是"可以傳回 point". \n Python Packages 範例: \n 例如: 將 point2.py 放入 downloads/py/line/ 目錄中, 且在 line 目錄中加入一個空的 __init__.py 檔案. \n 且 point2.py 的內容與先前 point.py 的內容相同. 一旦上列導入 Brython 且宣告 pythonpath 位於 downloads/py 之後, 之後頁面中的 Brython 程式就可以採 import 的方式導入 line package, 並且使用 package 中的 point2.py modules. \n # 引用 line package 的範例\nfrom line import point2\nprint(point2.point())\n \n# 執行結果會印出"可以傳回 point" \n 透過   PyWeb3d   (   on Github   ), 能不能利用 Brython 建立一個 3D 的貪食蛇或俄羅斯方塊? \n ajax.7z \n  導入 Brython 解譯程式庫  \n \n \n  啟動 Brython  \n \n \n \n  設定 id, 讓 Canvas 繪圖資料可以插入  \n \n \n  以下為 Brython 程式  \n', 'tags': '', 'url': 'Demo.html'}, {'title': 'C', 'text': '可以與 Webots 結合使用的 C/C++ 程式應用 \n 可用來編譯 Solvespace v3.1 版原始碼與 Webots 場景物件的可攜套件  python_2025_lite_w_msys_cmake_solvespace.7z \xa0(Download 1.96GB, After extracted 3.7GB) \n', 'tags': '', 'url': 'C.html'}, {'title': 'Arduino', 'text': 'https://www.arduino.cc/ \n 利用 Arduino 控制卡上的 C 程式結合電子硬體, 用來與伺服器上的 Python 程式與 CoppeliaSim (Webots) 平台上的場景物件進行互動 \n', 'tags': '', 'url': 'Arduino.html'}, {'title': 'MISC', 'text': '其他相關資料 \n', 'tags': '', 'url': 'MISC.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 ROC Flag PROC flag USA Flag GD in Brython \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};